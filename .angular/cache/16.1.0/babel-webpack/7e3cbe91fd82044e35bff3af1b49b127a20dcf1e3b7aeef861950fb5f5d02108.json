{"ast":null,"code":"import { addressTypeValues, phoneTypeValues } from '../contacts/contact.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../contacts/contacts.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction EditContactComponent_span_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"input\", 24);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const phoneType_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", phoneType_r2.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", phoneType_r2.title, \" \");\n  }\n}\nfunction EditContactComponent_option_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const addressType_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", addressType_r3.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(addressType_r3.title);\n  }\n}\nexport class EditContactComponent {\n  // // firstName = new FormControl('Murat'); initial value\n  // firstName = new FormControl();\n  // lastName = new FormControl();\n  // dateOfBirth = new FormControl();\n  // favoritesRanking = new FormControl();\n  constructor(route, contactsService, router, fb) {\n    this.route = route;\n    this.contactsService = contactsService;\n    this.router = router;\n    this.fb = fb;\n    //#region Before form builder decleration\n    // contactForm = new FormGroup({\n    //   id : new FormControl(),\n    //   firstName : new FormControl(),\n    //   lastName : new FormControl(),\n    //   dateOfBirth : new FormControl(),\n    //   favoritesRanking : new FormControl(),\n    //   phone : new FormGroup({\n    //     phoneNumber :  new FormControl(),\n    //     phoneType :  new FormControl(),\n    //   }),\n    //   address : new FormGroup({\n    //     streetAddress :  new FormControl(),\n    //     city :  new FormControl(),\n    //     state :  new FormControl(),\n    //     postalCode :  new FormControl(),\n    //     addressType :  new FormControl(),\n    //   })\n    // });\n    //#endregion\n    this.phoneTypes = phoneTypeValues;\n    this.addressTypes = addressTypeValues;\n    this.contactForm = this.fb.nonNullable.group({\n      id: '',\n      personal: false,\n      firstName: '',\n      lastName: '',\n      dateOfBirth: null,\n      favoritesRanking: null,\n      phone: this.fb.nonNullable.group({\n        phoneNumber: '',\n        phoneType: ''\n      }),\n      address: this.fb.nonNullable.group({\n        streetAddress: '',\n        city: '',\n        state: '',\n        postalCode: '',\n        addressType: ''\n      })\n    });\n  }\n  ngOnInit() {\n    const contactId = this.route.snapshot.params['id']; //add contact id to route\n    if (!contactId) return;\n    this.contactsService.getContact(contactId).subscribe(contact => {\n      if (!contact) return;\n      // this.firstName.setValue(contact?.firstName);\n      // this.lastName.setValue(contact?.lastName);\n      // this.dateOfBirth.setValue(contact?.dateOfBirth);\n      // this.favoritesRanking.setValue(contact?.favoritesRanking);\n      this.contactForm.setValue(contact);\n      //does everything belove in single-line\n      // this.contactForm.controls.id.setValue(contact?.id);\n      // this.contactForm.controls.firstName.setValue(contact?.firstName);\n      // this.contactForm.controls.lastName.setValue(contact?.lastName);\n      // this.contactForm.controls.dateOfBirth.setValue(contact?.dateOfBirth);\n      // this.contactForm.controls.favoritesRanking.setValue(contact?.favoritesRanking);\n      // this.contactForm.controls.phone.controls.phoneNumber.setValue(contact?.phone.phoneNumber);\n      // this.contactForm.controls.phone.controls.phoneType.setValue(contact?.phone.phoneType);\n      // this.contactForm.controls.address.controls.streetAddress.setValue(contact?.address.streetAddress);\n      // this.contactForm.controls.address.controls.city.setValue(contact?.address.city);\n      // this.contactForm.controls.address.controls.state.setValue(contact?.address.state);\n      // this.contactForm.controls.address.controls.postalCode.setValue(contact?.address.postalCode);\n      // this.contactForm.controls.address.controls.addressType.setValue(contact?.address.addressType);\n      //if we're setting only some fields we can patch instead of setValue\n      // const names = {firstName : contact.firstName, lastName: contact.lastName};\n      // this.contactForm.patchValue(names);\n    });\n  }\n\n  saveContact() {\n    console.log(this.contactForm.value); //gets all info as json object\n    //this.contactsService.saveContact(this.contactForm.value); if all contact field is optional like id?, firstName? etc. or we need to assign Contact as partial in the services like Partial<Contact>\n    // this.contactsService.saveContact(this.contactForm.value).subscribe({\n    this.contactsService.saveContact(this.contactForm.getRawValue()).subscribe({\n      //added nonnullable to fb to prevent error\n      next: () => this.router.navigate(['/contacts'])\n    });\n    // console.log(this.contactForm.controls.firstName.value);\n    // console.log(this.contactForm.controls.lastName.value);\n    // console.log(this.contactForm.controls.dateOfBirth.value);\n    // console.log(this.contactForm.controls.favoritesRanking.value);\n  }\n}\n\nEditContactComponent.ɵfac = function EditContactComponent_Factory(t) {\n  return new (t || EditContactComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ContactsService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nEditContactComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditContactComponent,\n  selectors: [[\"ng-component\"]],\n  decls: 42,\n  vars: 3,\n  consts: [[1, \"content\"], [1, \"header\"], [3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"firstName\", \"placeholder\", \"First Name\"], [\"formControlName\", \"lastName\", \"placeholder\", \"Last Name\"], [\"formControlName\", \"dateOfBirth\", \"placeholder\", \"Date of Birth\"], [\"formControlName\", \"favoritesRanking\", \"placeholder\", \"Favorites Ranking\", \"type\", \"number\"], [\"type\", \"checkbox\", \"formControlName\", \"personal\"], [\"formGroupName\", \"phone\", 1, \"flex-column\"], [1, \"flex-group\"], [\"formControlName\", \"phoneNumber\", \"placeholder\", \"Phone\"], [\"src\", \"/assets/plus-grey-blue.png\", 1, \"add\"], [1, \"radio\"], [4, \"ngFor\", \"ngForOf\"], [\"formGroupName\", \"address\", 1, \"address\"], [\"formControlName\", \"streetAddress\", \"placeholder\", \"Address\"], [\"placeholder\", \"City\", \"formControlName\", \"city\"], [\"placeholder\", \"State/Region\", \"formControlName\", \"state\"], [\"placeholder\", \"Zip/Postal Code\", \"formControlName\", \"postalCode\"], [\"formControlName\", \"addressType\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"buttons\"], [1, \"secondary\"], [\"type\", \"submit\", 1, \"primary\", 3, \"click\"], [\"type\", \"radio\", \"formControlName\", \"phoneType\", 3, \"value\"], [3, \"value\"]],\n  template: function EditContactComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"Edit Contact\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function EditContactComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.saveContact();\n      });\n      i0.ɵɵelementStart(4, \"section\")(5, \"nav\");\n      i0.ɵɵtext(6, \"Name/Info\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\");\n      i0.ɵɵelement(8, \"input\", 3)(9, \"input\", 4)(10, \"input\", 5)(11, \"input\", 6);\n      i0.ɵɵelementStart(12, \"div\");\n      i0.ɵɵelement(13, \"input\", 7);\n      i0.ɵɵtext(14, \" Personal \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"section\")(16, \"nav\");\n      i0.ɵɵtext(17, \"Phone\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 8)(19, \"div\", 9);\n      i0.ɵɵelement(20, \"input\", 10)(21, \"img\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\", 12);\n      i0.ɵɵtemplate(23, EditContactComponent_span_23_Template, 3, 2, \"span\", 13);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(24, \"section\")(25, \"nav\");\n      i0.ɵɵtext(26, \"Address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"div\")(28, \"div\", 14)(29, \"div\", 9);\n      i0.ɵɵelement(30, \"input\", 15)(31, \"img\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(32, \"input\", 16)(33, \"input\", 17)(34, \"input\", 18);\n      i0.ɵɵelementStart(35, \"select\", 19);\n      i0.ɵɵtemplate(36, EditContactComponent_option_36_Template, 2, 2, \"option\", 20);\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(37, \"div\", 21)(38, \"button\", 22);\n      i0.ɵɵtext(39, \"Cancel\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(40, \"button\", 23);\n      i0.ɵɵlistener(\"click\", function EditContactComponent_Template_button_click_40_listener() {\n        return ctx.saveContact();\n      });\n      i0.ɵɵtext(41, \"Save\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.contactForm);\n      i0.ɵɵadvance(20);\n      i0.ɵɵproperty(\"ngForOf\", ctx.phoneTypes);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngForOf\", ctx.addressTypes);\n    }\n  },\n  dependencies: [i4.NgForOf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.CheckboxControlValueAccessor, i3.SelectControlValueAccessor, i3.RadioControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i3.FormGroupName],\n  styles: [\".content[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  border: 1px solid #ccc;\\n}\\n\\nh1[_ngcontent-%COMP%] {\\n  background-color: var(--color-primary);\\n  color: var(--font-color-dark-bg);\\n  font-size: 28px;\\n  padding: 5px 10px;\\n  border-bottom: 1px solid #fff;\\n  margin: 0;\\n}\\n\\nsection[_ngcontent-%COMP%] {\\n  display: flex;\\n}\\n\\nsection[_ngcontent-%COMP%]   nav[_ngcontent-%COMP%] {\\n  padding: 10px 30px 10px 0;\\n  background-color: var(--color-primary);\\n  color: var(--font-color-dark-bg);\\n  flex: 0 0 200px;\\n  border-bottom: 2px solid white;\\n  display: flex;\\n  align-items: center;\\n  justify-content: right;\\n}\\n\\nsection[_ngcontent-%COMP%]:last-child   nav[_ngcontent-%COMP%] {\\n  border-bottom: none;\\n}\\n\\nsection[_ngcontent-%COMP%] > div[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  padding: 10px 20px;\\n  flex-grow: 1;\\n  justify-content: center;\\n}\\n\\nsection[_ngcontent-%COMP%]   div.flex-column[_ngcontent-%COMP%] {\\n  flex-direction: column;\\n  flex-grow: 1;\\n  justify-content: center;\\n}\\n\\nsection[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  max-width: 500px;\\n}\\n\\nsection[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\\n  margin: 5px 0;\\n  max-width: 520px;\\n}\\n\\nsection[_ngcontent-%COMP%]   div.radio[_ngcontent-%COMP%] {\\n  display: block;\\n  font-size: 20px;\\n}\\n\\nsection[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   *[_ngcontent-%COMP%] {\\n  margin: 5px 10px 5px 0;\\n}\\n\\nsection[_ngcontent-%COMP%]   div.radio[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]:not(:first-child) {\\n  margin-left: 10px;\\n}\\n\\nsection[_ngcontent-%COMP%]   div.radio[_ngcontent-%COMP%]   input[type=\\\"radio\\\"][_ngcontent-%COMP%] {\\n  margin-right: 0;\\n}\\n\\nsection[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n  display: flex;\\n}\\n\\n.address[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n\\n.address[_ngcontent-%COMP%]:not(:first-child) {\\n  margin-top: 20px;\\n}\\n\\n.add[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n  width: 45px;\\n}\\n\\n.flex-group[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center\\n}\\n\\n.flex-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  flex-grow: 1;\\n}\\n\\ninput.error[_ngcontent-%COMP%], select.error[_ngcontent-%COMP%], textarea.error[_ngcontent-%COMP%], .error[_ngcontent-%COMP%] {\\n  border: 1px solid var(--color-error);\\n}\\n\\nsection[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   em[_ngcontent-%COMP%] {\\n  color: var(--color-error);\\n  font-size: 18px;\\n  margin-bottom: 10px;\\n  margin-top: -5px;\\n  font-style: normal;\\n  display: block;\\n}\\n\\n.buttons[_ngcontent-%COMP%] {\\n  margin-top: 10px;\\n  display: flex;\\n  gap: 10px;\\n}\\n\\n.buttons[_ngcontent-%COMP%]   *[_ngcontent-%COMP%] {\\n  flex: 1 1 auto;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZWRpdC1jb250YWN0L2VkaXQtY29udGFjdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxzQ0FBc0M7RUFDdEMsZ0NBQWdDO0VBQ2hDLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsNkJBQTZCO0VBQzdCLFNBQVM7QUFDWDs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixzQ0FBc0M7RUFDdEMsZ0NBQWdDO0VBQ2hDLGVBQWU7RUFDZiw4QkFBOEI7RUFDOUIsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLFlBQVk7RUFDWix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsY0FBYztFQUNkLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxhQUFhO0VBQ2I7QUFDRjs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTs7OztFQUlFLG9DQUFvQztBQUN0Qzs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixlQUFlO0VBQ2YsbUJBQW1CO0VBQ25CLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsY0FBYztBQUNoQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixhQUFhO0VBQ2IsU0FBUztBQUNYOztBQUVBO0VBQ0UsY0FBYztBQUNoQiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250ZW50IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbn1cblxuaDEge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1wcmltYXJ5KTtcbiAgY29sb3I6IHZhcigtLWZvbnQtY29sb3ItZGFyay1iZyk7XG4gIGZvbnQtc2l6ZTogMjhweDtcbiAgcGFkZGluZzogNXB4IDEwcHg7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZmZmO1xuICBtYXJnaW46IDA7XG59XG5cbnNlY3Rpb24ge1xuICBkaXNwbGF5OiBmbGV4O1xufVxuXG5zZWN0aW9uIG5hdiB7XG4gIHBhZGRpbmc6IDEwcHggMzBweCAxMHB4IDA7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLXByaW1hcnkpO1xuICBjb2xvcjogdmFyKC0tZm9udC1jb2xvci1kYXJrLWJnKTtcbiAgZmxleDogMCAwIDIwMHB4O1xuICBib3JkZXItYm90dG9tOiAycHggc29saWQgd2hpdGU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogcmlnaHQ7XG59XG5cbnNlY3Rpb246bGFzdC1jaGlsZCBuYXYge1xuICBib3JkZXItYm90dG9tOiBub25lO1xufVxuXG5zZWN0aW9uPmRpdiB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgZmxleC1ncm93OiAxO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxuc2VjdGlvbiBkaXYuZmxleC1jb2x1bW4ge1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBmbGV4LWdyb3c6IDE7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG5zZWN0aW9uIGRpdiBpbnB1dCB7XG4gIG1heC13aWR0aDogNTAwcHg7XG59XG5cbnNlY3Rpb24gZGl2IHNlbGVjdCB7XG4gIG1hcmdpbjogNXB4IDA7XG4gIG1heC13aWR0aDogNTIwcHg7XG59XG5cbnNlY3Rpb24gZGl2LnJhZGlvIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtc2l6ZTogMjBweDtcbn1cblxuc2VjdGlvbiBkaXYgKiB7XG4gIG1hcmdpbjogNXB4IDEwcHggNXB4IDA7XG59XG5cbnNlY3Rpb24gZGl2LnJhZGlvICo6bm90KDpmaXJzdC1jaGlsZCkge1xuICBtYXJnaW4tbGVmdDogMTBweDtcbn1cblxuc2VjdGlvbiBkaXYucmFkaW8gaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcbiAgbWFyZ2luLXJpZ2h0OiAwO1xufVxuXG5zZWN0aW9uIGRpdiB7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbi5hZGRyZXNzIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLmFkZHJlc3M6bm90KDpmaXJzdC1jaGlsZCkge1xuICBtYXJnaW4tdG9wOiAyMHB4O1xufVxuXG4uYWRkIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICB3aWR0aDogNDVweDtcbn1cblxuLmZsZXgtZ3JvdXAge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyXG59XG5cbi5mbGV4LWdyb3VwIGlucHV0IHtcbiAgZmxleC1ncm93OiAxO1xufVxuXG5pbnB1dC5lcnJvcixcbnNlbGVjdC5lcnJvcixcbnRleHRhcmVhLmVycm9yLFxuLmVycm9yIHtcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tY29sb3ItZXJyb3IpO1xufVxuXG5zZWN0aW9uIGRpdiBlbSB7XG4gIGNvbG9yOiB2YXIoLS1jb2xvci1lcnJvcik7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgbWFyZ2luLXRvcDogLTVweDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLmJ1dHRvbnMge1xuICBtYXJnaW4tdG9wOiAxMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDEwcHg7XG59XG5cbi5idXR0b25zICoge1xuICBmbGV4OiAxIDEgYXV0bztcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"names":["addressTypeValues","phoneTypeValues","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","phoneType_r2","value","ɵɵtextInterpolate1","title","addressType_r3","ɵɵtextInterpolate","EditContactComponent","constructor","route","contactsService","router","fb","phoneTypes","addressTypes","contactForm","nonNullable","group","id","personal","firstName","lastName","dateOfBirth","favoritesRanking","phone","phoneNumber","phoneType","address","streetAddress","city","state","postalCode","addressType","ngOnInit","contactId","snapshot","params","getContact","subscribe","contact","setValue","saveContact","console","log","getRawValue","next","navigate","ɵɵdirectiveInject","i1","ActivatedRoute","i2","ContactsService","Router","i3","FormBuilder","selectors","decls","vars","consts","template","EditContactComponent_Template","rf","ctx","ɵɵlistener","EditContactComponent_Template_form_ngSubmit_3_listener","ɵɵtemplate","EditContactComponent_span_23_Template","EditContactComponent_option_36_Template","EditContactComponent_Template_button_click_40_listener"],"sources":["/Users/muratseker/Documents/repos/angular-reactive-forms/src/app/edit-contact/edit-contact.component.ts","/Users/muratseker/Documents/repos/angular-reactive-forms/src/app/edit-contact/edit-contact.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ContactsService } from '../contacts/contacts.service';\nimport { addressTypeValues, phoneTypeValues } from '../contacts/contact.model';\n\n@Component({\n  templateUrl: './edit-contact.component.html',\n  styleUrls: ['./edit-contact.component.css']\n})\nexport class EditContactComponent implements OnInit {\n  //#region Before form builder decleration\n  // contactForm = new FormGroup({\n  //   id : new FormControl(),\n  //   firstName : new FormControl(),\n  //   lastName : new FormControl(),\n  //   dateOfBirth : new FormControl(),\n  //   favoritesRanking : new FormControl(),\n  //   phone : new FormGroup({\n  //     phoneNumber :  new FormControl(),\n  //     phoneType :  new FormControl(),\n  //   }),\n  //   address : new FormGroup({\n  //     streetAddress :  new FormControl(),\n  //     city :  new FormControl(),\n  //     state :  new FormControl(),\n  //     postalCode :  new FormControl(),\n  //     addressType :  new FormControl(),\n  //   })\n  // });\n  //#endregion\n\n  phoneTypes = phoneTypeValues;\n  addressTypes = addressTypeValues;\n  contactForm = this.fb.nonNullable.group({\n      id : '',\n      personal : false,\n      firstName : '',\n      lastName : '',\n      dateOfBirth : <Date | null> null,\n      favoritesRanking : <number | null> null,\n      phone : this.fb.nonNullable.group({\n        phoneNumber :  '',\n        phoneType :  '',\n      }),\n      address : this.fb.nonNullable.group({\n        streetAddress :  '',\n        city :  '',\n        state :  '',\n        postalCode :  '',\n        addressType :  '',\n      })\n    });\n\n  // // firstName = new FormControl('Murat'); initial value\n  // firstName = new FormControl();\n  // lastName = new FormControl();\n  // dateOfBirth = new FormControl();\n  // favoritesRanking = new FormControl();\n\n  constructor(\n    private route: ActivatedRoute, \n    private contactsService: ContactsService, \n    private router: Router,\n    private fb: FormBuilder) { }\n\n  ngOnInit() {\n    const contactId = this.route.snapshot.params['id'];//add contact id to route\n    if (!contactId) return\n\n    this.contactsService.getContact(contactId).subscribe((contact) => {\n      if (!contact) return;\n      // this.firstName.setValue(contact?.firstName);\n      // this.lastName.setValue(contact?.lastName);\n      // this.dateOfBirth.setValue(contact?.dateOfBirth);\n      // this.favoritesRanking.setValue(contact?.favoritesRanking);\n\n      this.contactForm.setValue(contact);\n      //does everything belove in single-line\n      // this.contactForm.controls.id.setValue(contact?.id);\n      // this.contactForm.controls.firstName.setValue(contact?.firstName);\n      // this.contactForm.controls.lastName.setValue(contact?.lastName);\n      // this.contactForm.controls.dateOfBirth.setValue(contact?.dateOfBirth);\n      // this.contactForm.controls.favoritesRanking.setValue(contact?.favoritesRanking);\n      // this.contactForm.controls.phone.controls.phoneNumber.setValue(contact?.phone.phoneNumber);\n      // this.contactForm.controls.phone.controls.phoneType.setValue(contact?.phone.phoneType);\n      // this.contactForm.controls.address.controls.streetAddress.setValue(contact?.address.streetAddress);\n      // this.contactForm.controls.address.controls.city.setValue(contact?.address.city);\n      // this.contactForm.controls.address.controls.state.setValue(contact?.address.state);\n      // this.contactForm.controls.address.controls.postalCode.setValue(contact?.address.postalCode);\n      // this.contactForm.controls.address.controls.addressType.setValue(contact?.address.addressType);\n\n      //if we're setting only some fields we can patch instead of setValue\n      // const names = {firstName : contact.firstName, lastName: contact.lastName};\n      // this.contactForm.patchValue(names);\n    });\n  }\n\n  saveContact() {\n    console.log(this.contactForm.value);//gets all info as json object\n    //this.contactsService.saveContact(this.contactForm.value); if all contact field is optional like id?, firstName? etc. or we need to assign Contact as partial in the services like Partial<Contact>\n    // this.contactsService.saveContact(this.contactForm.value).subscribe({\n      this.contactsService.saveContact(this.contactForm.getRawValue()).subscribe({ // after making phone and address as FormGroup\n        //added nonnullable to fb to prevent error\n      next: () => this.router.navigate(['/contacts'])\n    });\n\n    // console.log(this.contactForm.controls.firstName.value);\n    // console.log(this.contactForm.controls.lastName.value);\n    // console.log(this.contactForm.controls.dateOfBirth.value);\n    // console.log(this.contactForm.controls.favoritesRanking.value);\n  }\n}\n","<div class=\"content\">\n  <h1 class=\"header\">Edit Contact</h1>\n  <form [formGroup]=\"contactForm\" (ngSubmit)=\"saveContact()\">\n    <section>\n      <nav>Name/Info</nav>\n      <div>\n        <!-- <input [formControl]=\"firstName\" placeholder=\"First Name\" /> -->\n        <input formControlName=\"firstName\" placeholder=\"First Name\" />\n        <input formControlName=\"lastName\" placeholder=\"Last Name\" />\n        <input formControlName=\"dateOfBirth\" placeholder=\"Date of Birth\" />\n        <input formControlName=\"favoritesRanking\" placeholder=\"Favorites Ranking\" type=\"number\"/>\n        <div>\n          <input type=\"checkbox\" formControlName=\"personal\" /> Personal\n        </div>\n      </div>\n    </section>\n    <section>\n      <nav>Phone</nav>\n      <div formGroupName=\"phone\" class=\"flex-column\">\n        <div class=\"flex-group\">\n          <input formControlName=\"phoneNumber\" placeholder=\"Phone\" />\n          <img src=\"/assets/plus-grey-blue.png\" class=\"add\" />\n        </div>\n        <div class=\"radio\">\n          <!-- before phoneTypeValues decleration -->\n          <!-- <input type=\"radio\" formControlName=\"phoneType\" value=\"mobile\" /> Mobile\n          <input type=\"radio\" formControlName=\"phoneType\" value=\"work\" /> Work\n          <input type=\"radio\" formControlName=\"phoneType\" value=\"other\" /> Other -->\n          <span *ngFor=\"let phoneType of phoneTypes\">\n            <input type=\"radio\" formControlName=\"phoneType\" [value]=\"phoneType.value\" /> {{ phoneType.title }}\n          </span>\n        </div>\n      </div>\n    </section>\n    <section>\n      <nav>Address</nav>\n      <div>\n        <div formGroupName=\"address\" class=\"address\">\n          <div class=\"flex-group\">\n            <input formControlName=\"streetAddress\" placeholder=\"Address\" />\n            <img src=\"/assets/plus-grey-blue.png\" class=\"add\" />\n          </div>\n          <input placeholder=\"City\" formControlName=\"city\" />\n          <input placeholder=\"State/Region\" formControlName=\"state\" />\n          <input placeholder=\"Zip/Postal Code\" formControlName=\"postalCode\" />\n          <select formControlName=\"addressType\">\n            <option *ngFor=\"let addressType of addressTypes\" [value]=\"addressType.value\">{{ addressType.title }}</option>\n            <!-- <option value=\"home\">Home</option>\n            <option value=\"work\">Work</option>\n            <option value=\"mobile\">Other</option> -->\n          </select>\n        </div>\n      </div>\n    </section>\n  </form>\n  <div class=\"buttons\">\n    <button class=\"secondary\">Cancel</button>\n    <button type=\"submit\" class=\"primary\" (click)=\"saveContact()\">Save</button>\n  </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}