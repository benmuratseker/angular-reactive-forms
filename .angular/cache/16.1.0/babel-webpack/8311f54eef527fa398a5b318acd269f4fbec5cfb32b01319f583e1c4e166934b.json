{"ast":null,"code":"import { map } from 'rxjs';\nimport { nanoid } from 'nanoid';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ContactsService {\n  constructor(http) {\n    this.http = http;\n  }\n  getContact(id) {\n    return this.http.get(`api/contacts/${id}`).pipe(map(c => {\n      const dob = c.dateOfBirth ? new Date(c.dateOfBirth) : null;\n      return {\n        ...c,\n        dateOfBirth: dob\n      };\n    }));\n  }\n  getAllContacts() {\n    return this.http.get('api/contacts');\n  }\n  saveContact(contact) {\n    const headers = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    if (!contact.id || contact.id === '') {\n      let newContact = {\n        ...contact,\n        id: nanoid(5)\n      };\n      return this.http.post('api/contacts/', newContact, headers);\n    } else return this.http.put('api/contacts/', contact, headers);\n  }\n}\nContactsService.ɵfac = function ContactsService_Factory(t) {\n  return new (t || ContactsService)(i0.ɵɵinject(i1.HttpClient));\n};\nContactsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContactsService,\n  factory: ContactsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","nanoid","ContactsService","constructor","http","getContact","id","get","pipe","c","dob","dateOfBirth","Date","getAllContacts","saveContact","contact","headers","newContact","post","put","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/muratseker/Documents/repos/angular-reactive-forms/src/app/contacts/contacts.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\nimport { Contact } from './contact.model';\nimport { nanoid } from 'nanoid'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactsService {\n  constructor(private http: HttpClient) { }\n\n  getContact(id: string): Observable<Contact | undefined> {\n    return this.http.get<Contact>(`api/contacts/${id}`)\n      .pipe(map(c => {\n        const dob = c.dateOfBirth ? new Date(c.dateOfBirth) : null;\n        return { ...c, dateOfBirth: dob }\n      }));\n  }\n\n  getAllContacts(): Observable<Contact[]> {\n    return this.http.get<Contact[]>('api/contacts');\n  }\n\n  saveContact(contact: Contact): Observable<Contact> {\n    const headers = { headers: { 'Content-Type': 'application/json' } };\n\n    if (!contact.id || contact.id === '') {\n      let newContact: Contact = { ...contact, id: nanoid(5) };\n      return this.http.post<Contact>('api/contacts/', newContact, headers)\n    }\n    else\n      return this.http.put<Contact>('api/contacts/', contact, headers)\n  }\n}"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;AAEtC,SAASC,MAAM,QAAQ,QAAQ;;;AAK/B,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAU,gBAAgBD,EAAE,EAAE,CAAC,CAChDE,IAAI,CAACR,GAAG,CAACS,CAAC,IAAG;MACZ,MAAMC,GAAG,GAAGD,CAAC,CAACE,WAAW,GAAG,IAAIC,IAAI,CAACH,CAAC,CAACE,WAAW,CAAC,GAAG,IAAI;MAC1D,OAAO;QAAE,GAAGF,CAAC;QAAEE,WAAW,EAAED;MAAG,CAAE;IACnC,CAAC,CAAC,CAAC;EACP;EAEAG,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAY,cAAc,CAAC;EACjD;EAEAO,WAAWA,CAACC,OAAgB;IAC1B,MAAMC,OAAO,GAAG;MAAEA,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;IAAE,CAAE;IAEnE,IAAI,CAACD,OAAO,CAACT,EAAE,IAAIS,OAAO,CAACT,EAAE,KAAK,EAAE,EAAE;MACpC,IAAIW,UAAU,GAAY;QAAE,GAAGF,OAAO;QAAET,EAAE,EAAEL,MAAM,CAAC,CAAC;MAAC,CAAE;MACvD,OAAO,IAAI,CAACG,IAAI,CAACc,IAAI,CAAU,eAAe,EAAED,UAAU,EAAED,OAAO,CAAC;KACrE,MAEC,OAAO,IAAI,CAACZ,IAAI,CAACe,GAAG,CAAU,eAAe,EAAEJ,OAAO,EAAEC,OAAO,CAAC;EACpE;;AAxBWd,eAAe,C;mBAAfA,eAAe,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAfrB,eAAe,C;SAAfA,eAAe;EAAAsB,OAAA,EAAftB,eAAe,CAAAuB,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}